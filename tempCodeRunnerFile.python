import gym
import random
import numpy as np
import torch
import torch.nn as nn
import torch.optim as optim

import gym
env = gym.make('LunarLander-v2')

# Define the Q-Network class
class QNetwork(nn.Module):
    def __init__(self, state_size, action_size, seed):
        super(QNetwork, self).__init__()
        self.seed = torch.manual_seed(seed)
        self.fc1 = nn.Linear(state_size, 64)
        self.fc2 = nn.Linear(64, 128)
        self.fc3 = nn.Linear(128, action_size)

    def forward(self, state):
        x = nn.functional.relu(self.fc1(state))
        x = nn.functional.relu(self.fc2(x))
        return self.fc3(x)

# Define the Agent class
class Agent():
    def __init__(self, state_size, action_size, seed):
        self.state_size = state_size
        self.action_size = action_size
        self.seed = random.seed(seed)

        # Initialize the Q-Network
        self.qnetwork_local = QNetwork(state_size, action_size, seed)
        self.optimizer = optim.Adam(self.qnetwork_local.parameters(), lr=5e-4)

    def act(self, state, eps=0.0):
        if random.random() < eps:
            return random.choice(np.arange(self.action_size))
        else:
            state = torch.from_numpy(state).float().unsqueeze(0).to(device)
            self.qnetwork_local.eval()
            with torch.no_grad():
                action_values = self.qnetwork_local(state)
            self.qnetwork_local.train()
            return np.argmax(action_values.cpu().data.numpy())

    def learn(self, experiences, gamma):
        states, actions, rewards, next_states, dones = experiences

        # Get the expected Q values
        q_expected = self.qnetwork_local(states).gather(1, actions)

        # Compute the target Q values
        q_targets_next = self.qnetwork_local(next_states).detach().max(1)[0].unsqueeze(1)
        q_targets = rewards + (gamma * q_targets_next * (1 - dones))

        # Compute the loss
        loss = nn.functional.mse_loss(q_expected, q_targets)

        # Minimize the loss
        self.optimizer.zero_grad()
        loss.backward()
        self.optimizer.step()

# Set the device (GPU or CPU)
device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")

# Create the environment
env = gym.make('LunarLander-v2')
state_size = env.observation_space.shape[0]
action_size = env.action_space.n

# Set the hyperparameters
seed = 0
lr = 5e-4
batch_size = 64
buffer_size = int(1e5)
gamma = 0.99
eps_start = 1.0
eps_end = 0.01
eps_decay = 0.995
n_episodes = 2000
max_t = 1000

# Initialize the agent
agent = Agent(state_size, action_size, seed)

# Initialize the replay buffer
memory = ReplayBuffer(action_size, buffer_size, batch_size, seed)

# Train the agent
scores = []
eps = eps_start
for i_episode in range(1, n_episodes+1):
    state = env.reset()
    score = 0
    for t in range(max_t):
        action = agent.act(state, eps)
        next_state, reward, done, _ = env.step(action)
        memory.add(state, action, reward, next_state, done)
        score += reward
        if len(memory) > batch_size:
            experiences = memory.sample()
            agent.learn(experiences, gamma)
        state = next_state
        if done:
            break
    scores.append(score)
    eps = max(eps_end, eps_decay*eps)
    print('\rEpisode {}\tAverage Score: {:.2f}'.format(i_episode, np.mean(scores[-100:])), end="")
    if i_episode % 100 == 0:
        print('\rEpisode {}\tAverage Score: {:.2f}'.format(i_episode, np.mean(scores[-100:])))
